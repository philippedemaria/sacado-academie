"use strict";var Basthon=function(){var n,e={};return e._pyodideUrl="https://pyodide-cdn2.iodide.io/v0.15.0/full/pyodide.js",e.dirname=function(n){return n.substring(0,n.lastIndexOf("/"))},e.loaded=!1,e.urlScript=document.currentScript.src,e.basthonRoot=e.dirname(e.urlScript),e.packages=((n={pyodide:null}).internal={turtle:{path:e.basthonRoot+"/turtle-0.0.1-py3-none-any.whl"},requests:{path:e.basthonRoot+"/requests-0.0.1-py3-none-any.whl"},proj4py:{path:e.basthonRoot+"/proj4py-0.0.1-py3-none-any.whl",deps:["pkg_resources"]},folium:{path:"folium"}},n.all=null,n.loaded=null,n.init=function(){n.pyodide=new Set(Object.keys(pyodide._module.packages.import_name_to_package_name)),n.all=new Set([...n.pyodide,...Object.keys(n.internal)]),n.loaded=new Set},n._processPackagesBeforeLoad=function(e){return"string"==typeof e&&(e=[e]),(e=e.filter(e=>!n.loaded.has(e))).forEach(e=>n.loaded.add(e)),e},n.loadPyodide=function(e,o){if(0===(e=n._processPackagesBeforeLoad(e)).length)return Promise.resolve();const t=e.map(n=>pyodide._module.packages.import_name_to_package_name[n]);return pyodide.loadPackage(t).then(function(){o(e)})},n.loadInternal=function(e,o){if(0===(e=n._processPackagesBeforeLoad(e)).length)return Promise.resolve();const t="['"+e.map(e=>n.internal[e].path).join("', '")+"']";return pyodide.runPythonAsync("import micropip; micropip.install("+t+")").then(function(){o(e)})},n.load=function(e,o){if("string"==typeof e&&(e=[e]),0===e.length)return;const t=e.filter(e=>n.pyodide.has(e)),i=e.filter(e=>e in n.internal);return n.loadPyodide(t,o).then(function(){return n.loadInternal(i,o)})},n),e.loadScript=function(n){return new Promise(function(e,o){var t=document.createElement("script");t.onload=e,t.onerror=o,t.src=n,document.head.appendChild(t)})},e._onload=function(){e.loaded=!0,e.addEventListener("eval.request",e.evalFromEvent);const n=pyodide.pyimport("sys");return e.pythonVersion=n.version,e.packages.init(),pyodide.runPythonAsync("import pyodide ; pyodide.eval_code(pyodide.open_url('"+e.basthonRoot+"/basthon.py.js').getvalue(), globals())")},e.load=new Promise(function(n,e){window.addEventListener("load",n)}).then(function(){return new Promise(function(n,e){"undefined"!=typeof requirejs?n():e()})}).then(function(){return requirejs.config({paths:{pyodide:e._pyodideUrl.slice(0,-3)}}),new Promise(function(n,e){require(["pyodide"],n,e)})},function(){return e.loadScript(e._pyodideUrl)}).then(function(){return languagePluginLoader.then(e._onload,function(){console.error("Can't load Python from Pyodide")})},function(){console.error("Can't load pyodide.js")}),e.dispatchEvent=function(n,e){const o=new CustomEvent("basthon."+n,{detail:e});document.dispatchEvent(o)},e.addEventListener=function(n,e){document.addEventListener("basthon."+n,function(n){e(n.detail)})},e.findImports=function(n){if(e.loaded){var o=pyodide.globals.pyodide.find_imports(n);for(const n of o)o=o.concat((e.packages.internal[n]||{deps:[]}).deps);return o}},e.clone=function(n){return JSON.parse(JSON.stringify(n))},e.eval=function(n,o=null){if(e.loaded)return pyodide.globals.Basthon.eval(n,o)},e.evalAsync=function(n,o,t,i,r=null){if(e.loaded)return void 0===o&&(o=function(n){console.log(n)}),void 0===t&&(t=function(n){console.error(n)}),new Promise(function(o,t){o(e.findImports(n))}).then(function(n){return e.packages.load(n,i)}).then(function(){return new Promise(function(e,i){e(pyodide.globals.Basthon.shell_eval(n,o,t,r))})})},e.evalFromEvent=function(n){if(e.loaded){var o=function(o){return function(t){var i=e.clone(n);i.stream=o,i.content=t,e.dispatchEvent("eval.output",i)}},t=o("stdout"),i=o("stderr");return e.evalAsync(n.code,t,i,function(n){var e=function(n){Basthon.dispatchEvent("eval.display",n)};n.includes("matplotlib")?pyodide.globals.Basthon.hack_matplotlib(e):n.includes("turtle")?pyodide.globals.Basthon.hack_turtle(e):n.includes("sympy")?pyodide.globals.Basthon.hack_sympy(e):n.includes("folium")?pyodide.globals.Basthon.hack_folium(e):n.includes("pandas")&&pyodide.globals.Basthon.hack_pandas(e)},n).then(function(o){var t=e.clone(n);t.execution_count=e.executionCount(),void 0!==o&&(t.result=o),e.dispatchEvent("eval.finished",t)},function(o){i(o.toString());var t=e.clone(n);t.error=o,t.execution_count=e.executionCount(),e.dispatchEvent("eval.error",t)})}},e.executionCount=function(){return pyodide.globals.Basthon.execution_count},e.restart=function(){if(e.loaded)return pyodide.globals.Basthon.restart()},e}();