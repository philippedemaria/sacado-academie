# Generated by Django 3.0.5 on 2021-06-23 18:28

import account.models
import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import qcm.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('group', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('account', '0001_initial'),
        ('socle', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=50, verbose_name='Titre')),
                ('annoncement', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Texte*')),
                ('duration', models.PositiveIntegerField(blank=True, default=15, verbose_name='Durée estimée de lecture')),
                ('is_publish', models.BooleanField(default=0, verbose_name='Publié ?')),
                ('publish_start', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Changer les dates des cours peut remplacer les réglages de leur durée de disponibilité et leur placement dans les pages de cours ou le tableau de bord. Veuillez confirmer les dates d’échéance avant de modifier les dates des cours. ', max_length=255, verbose_name='Début à')),
                ('publish_end', models.DateTimeField(blank=True, max_length=255, null=True, verbose_name='Se termine à')),
                ('ranking', models.PositiveIntegerField(blank=True, default=1, null=True, verbose_name='Ordre')),
                ('is_task', models.BooleanField(default=0, verbose_name='Tache à rendre ?')),
                ('is_paired', models.BooleanField(default=0, verbose_name='Elèves créateurs ?')),
                ('is_active', models.BooleanField(default=0, verbose_name='Contenu en cours')),
                ('is_share', models.BooleanField(default=0, verbose_name='Mutualisé ?')),
                ('date_limit', models.DateTimeField(blank=True, null=True, verbose_name='Date limite du rendu')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('notification', models.BooleanField(default=0, help_text='Envoie un message aux participants.', verbose_name='Informer des modifications ?')),
                ('author', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author_course', to='account.Teacher')),
                ('creators', models.ManyToManyField(blank=True, related_name='creators_course', to='account.Student', verbose_name='Co auteurs élève')),
            ],
        ),
        migrations.CreateModel(
            name='Customanswerbystudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(blank=True, default='', null=True, upload_to=qcm.models.file_directory_student, verbose_name='Fichier pdf ou texte')),
                ('answer', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', null=True)),
                ('comment', models.TextField(default='', null=True)),
                ('point', models.CharField(default='', max_length=10, verbose_name='Note')),
                ('is_corrected', models.BooleanField(default=0, editable=False)),
                ('audio', models.FileField(blank=True, default='', null=True, upload_to=qcm.models.file_folder_path, verbose_name='Commentaire audio')),
            ],
        ),
        migrations.CreateModel(
            name='Customexercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default=account.models.generate_code, max_length=100, unique=True, verbose_name='Code')),
                ('instruction', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Consigne*')),
                ('calculator', models.BooleanField(default=0, verbose_name='Calculatrice ?')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='A partir de')),
                ('date_limit', models.DateTimeField(blank=True, null=True, verbose_name='Date limite du rendu')),
                ('lock', models.DateTimeField(blank=True, null=True, verbose_name='Verrouillé dès le')),
                ('imagefile', models.ImageField(blank=True, default='', upload_to=qcm.models.vignette_directory_path, verbose_name="Vignette d'accueil")),
                ('duration', models.PositiveIntegerField(blank=True, default=15, verbose_name='Durée (min.)')),
                ('is_share', models.BooleanField(default=0, verbose_name='Mutualisé ?')),
                ('is_realtime', models.BooleanField(default=0, verbose_name='Temps réel ?')),
                ('is_python', models.BooleanField(default=0, verbose_name='Python ?')),
                ('is_scratch', models.BooleanField(default=0, verbose_name='Scratch ?')),
                ('is_file', models.BooleanField(default=0, verbose_name='Fichier ?')),
                ('is_image', models.BooleanField(default=0, verbose_name='Image/Scan ?')),
                ('is_text', models.BooleanField(default=0, verbose_name='Texte ?')),
                ('is_mark', models.BooleanField(default=0, verbose_name='Notation ?')),
                ('mark', models.PositiveIntegerField(default=0, verbose_name='Sur ?')),
                ('is_publish', models.BooleanField(default=0, verbose_name='Publié ?')),
                ('ranking', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('text_cor', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Correction écrite')),
                ('file_cor', models.ImageField(blank=True, default='', upload_to=qcm.models.vignette_directory_path, verbose_name='Fichier de correction')),
                ('video_cor', models.CharField(blank=True, default='', max_length=100, verbose_name='Code de la vidéo Youtube')),
                ('is_publish_cor', models.BooleanField(default=0, verbose_name='Publié ?')),
                ('knowledges', models.ManyToManyField(blank=True, related_name='knowledge_customexercises', to='socle.Knowledge', verbose_name='Savoir faire évalués')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('knowledge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exercises', to='socle.Knowledge', verbose_name='Savoir faire associé - Titre')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exercises', to='socle.Level', verbose_name='Niveau')),
            ],
        ),
        migrations.CreateModel(
            name='Mastering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consigne', models.CharField(blank=True, default='', max_length=255, verbose_name='Consigne')),
                ('video', models.CharField(blank=True, default='', max_length=50, verbose_name='code de vidéo Youtube')),
                ('mediation', models.FileField(blank=True, default='', null=True, upload_to=qcm.models.directory_path_mastering, verbose_name='Fichier')),
                ('writing', models.BooleanField(default=0, verbose_name="Page d'écriture")),
                ('duration', models.PositiveIntegerField(blank=True, default=15, verbose_name='Durée estimée')),
                ('scale', models.PositiveIntegerField(default=3, editable=False)),
                ('ranking', models.PositiveIntegerField(default=0, editable=False)),
                ('courses', models.ManyToManyField(blank=True, related_name='courses_mastering', to='qcm.Course')),
                ('exercise', models.ForeignKey(blank=True, default='', editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='exercise', to='qcm.Exercise')),
            ],
        ),
        migrations.CreateModel(
            name='Masteringcustom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consigne', models.CharField(blank=True, default='', max_length=255, verbose_name='Consigne')),
                ('video', models.CharField(blank=True, default='', max_length=50, verbose_name='code de vidéo Youtube')),
                ('mediation', models.FileField(blank=True, default='', null=True, upload_to=qcm.models.directory_path_mastering, verbose_name='Fichier')),
                ('writing', models.BooleanField(default=0, verbose_name="Page d'écriture")),
                ('duration', models.PositiveIntegerField(blank=True, default=15, verbose_name='Durée estimée')),
                ('scale', models.PositiveIntegerField(default=3, editable=False)),
                ('ranking', models.PositiveIntegerField(default=0, editable=False)),
                ('courses', models.ManyToManyField(blank=True, related_name='courses_mastering_custom', to='qcm.Course')),
                ('customexercise', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customexercise_mastering_custom', to='qcm.Customexercise', verbose_name='Exercice')),
                ('exercise', models.ForeignKey(blank=True, default='', editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='exercise_mastering_custom', to='qcm.Exercise')),
            ],
        ),
        migrations.CreateModel(
            name='Parcours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default=account.models.generate_code, max_length=100, unique=True, verbose_name='Code')),
                ('title', models.CharField(max_length=255, verbose_name='Titre')),
                ('color', models.CharField(default='#00819F', max_length=255, verbose_name='Couleur')),
                ('is_share', models.BooleanField(default=0, verbose_name='Mutualisé ?')),
                ('is_publish', models.BooleanField(default=0, verbose_name='Publié ?')),
                ('is_archive', models.BooleanField(default=0, editable=False, verbose_name='Archivé ?')),
                ('is_achievement', models.BooleanField(default=0, verbose_name='Avancement ?')),
                ('linked', models.BooleanField(default=0, editable=False)),
                ('is_favorite', models.BooleanField(default=1, verbose_name='Favori ?')),
                ('is_evaluation', models.BooleanField(default=0, editable=False)),
                ('is_next', models.BooleanField(default=0, verbose_name='Suivant ?')),
                ('is_exit', models.BooleanField(default=0, verbose_name='Retour aux exercices ?')),
                ('is_stop', models.BooleanField(default=0, verbose_name='Limité ?')),
                ('duration', models.PositiveIntegerField(blank=True, default=2, verbose_name='Temps de chargement (min.)')),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='A partir de')),
                ('stop', models.DateTimeField(blank=True, null=True, verbose_name='Verrouillage')),
                ('zoom', models.BooleanField(default=1, verbose_name='Zoom ?')),
                ('maxexo', models.IntegerField(blank=True, default=-1, null=True, verbose_name='Tentatives')),
                ('vignette', models.ImageField(blank=True, default='', upload_to=qcm.models.vignette_directory_path, verbose_name="Vignette d'accueil")),
                ('ranking', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('is_leaf', models.BooleanField(default=0, verbose_name='Inclus dans un dossier ?')),
                ('is_folder', models.BooleanField(default=0, verbose_name='Dossier')),
                ('author', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author_parcours', to='account.Teacher', verbose_name='Auteur')),
                ('coteachers', models.ManyToManyField(blank=True, related_name='coteacher_parcours', to='account.Teacher', verbose_name='Enseignant en co-animation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.PositiveIntegerField(default=0, editable=False)),
                ('is_publish', models.BooleanField(default=1)),
                ('start', models.DateTimeField(blank=True, null=True, verbose_name='A partir de')),
                ('date_limit', models.DateTimeField(blank=True, null=True, verbose_name='Date limite du rendu')),
                ('is_evaluation', models.BooleanField(default=0)),
                ('duration', models.PositiveIntegerField(default=15, verbose_name='Durée estimée en minutes')),
                ('situation', models.PositiveIntegerField(default=10, help_text='Pour valider le qcm', verbose_name='Nombre minimal de situations')),
                ('beginner', models.TimeField(blank=True, null=True, verbose_name='Heure du début')),
                ('instruction', models.TextField(blank=True, editable=False, null=True)),
                ('maxexo', models.IntegerField(blank=True, default=-1, null=True, verbose_name='Nombre max de réalisation par exercice')),
                ('is_lock', models.BooleanField(default=0, verbose_name='Exercice cloturé ?')),
                ('is_mark', models.BooleanField(default=0, verbose_name='Notation ?')),
                ('mark', models.CharField(default='', max_length=3, verbose_name='Sur ?')),
                ('is_correction_visible', models.BooleanField(default=0, editable=False)),
                ('exercise', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exercise_relationship', to='qcm.Exercise')),
                ('parcours', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='parcours_relationship', to='qcm.Parcours')),
                ('skills', models.ManyToManyField(blank=True, editable=False, related_name='skills_relationship', to='socle.Skill')),
                ('students', models.ManyToManyField(blank=True, editable=False, related_name='students_relationship', to='account.Student')),
            ],
            options={
                'unique_together': {('exercise', 'parcours')},
            },
        ),
        migrations.CreateModel(
            name='Writtenanswerbystudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('imagefile', models.ImageField(blank=True, default='', null=True, upload_to=qcm.models.file_directory_student, verbose_name='Scan ou image ou Photo')),
                ('answer', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', null=True)),
                ('comment', models.TextField(default='', editable=False, null=True)),
                ('audio', models.FileField(blank=True, default='', null=True, upload_to=qcm.models.file_directory_path, verbose_name='Commentaire audio')),
                ('point', models.CharField(default='', max_length=10, verbose_name='Note')),
                ('is_corrected', models.BooleanField(default=0, editable=False)),
                ('relationship', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='relationship_written_answer', to='qcm.Relationship')),
                ('student', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='student_written_answer', to='account.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Tracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('exercise_id', models.PositiveIntegerField(default=0, editable=False, null=True)),
                ('is_custom', models.BooleanField(blank=True, default=0)),
                ('parcours', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='tracker', to='qcm.Parcours')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracker', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Supportfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Titre')),
                ('annoncement', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Précision sur le savoir faire')),
                ('code', models.CharField(blank=True, default='', max_length=100, unique=True, verbose_name='Code*')),
                ('situation', models.PositiveIntegerField(default=10, help_text='Pour valider le qcm', verbose_name='Nombre minimal de situations')),
                ('calculator', models.BooleanField(default=0, verbose_name='Calculatrice ?')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modified', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('width', models.PositiveIntegerField(default=750, verbose_name='Largeur')),
                ('height', models.PositiveIntegerField(default=550, verbose_name='Hauteur')),
                ('ggbfile', models.FileField(blank=True, default='', upload_to=qcm.models.quiz_directory_path, verbose_name='Fichier ggb')),
                ('imagefile', models.ImageField(default='', upload_to=qcm.models.image_directory_path, verbose_name="Vignette d'accueil")),
                ('toolBar', models.BooleanField(default=0, verbose_name='Barre des outils ?')),
                ('menuBar', models.BooleanField(default=0, verbose_name='Barre de menu ?')),
                ('algebraInput', models.BooleanField(default=0, verbose_name='Multi-fenêtres ?')),
                ('resetIcon', models.BooleanField(default=0, verbose_name='Bouton Reset ?')),
                ('dragZoom', models.BooleanField(default=0, verbose_name='Zoom/déplacement ?')),
                ('is_title', models.BooleanField(default=0, editable=False, verbose_name="titre pour l'organisation des parcours")),
                ('is_subtitle', models.BooleanField(default=0, verbose_name="sous-titre pour l'organisation des parcours")),
                ('attach_file', models.FileField(blank=True, default='', upload_to=qcm.models.file_attach_path, verbose_name='Fichier pdf attaché')),
                ('duration', models.PositiveIntegerField(blank=True, default=15, verbose_name='Durée estimée - en minutes')),
                ('is_ggbfile', models.BooleanField(default=1, verbose_name='Type de support')),
                ('is_python', models.BooleanField(default=0, verbose_name='Python ?')),
                ('is_scratch', models.BooleanField(default=0, verbose_name='Scratch ?')),
                ('is_file', models.BooleanField(default=0, verbose_name='Fichier ?')),
                ('is_image', models.BooleanField(default=0, verbose_name='Iage/Scan ?')),
                ('is_text', models.BooleanField(default=0, verbose_name='Texte ?')),
                ('correction', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='', null=True, verbose_name='Corrigé')),
                ('ranking', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='supportfiles', to='account.Teacher')),
                ('knowledge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='supportfiles', to='socle.Knowledge', verbose_name='Savoir faire associé')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='supportfiles', to='socle.Level', verbose_name='Niveau')),
                ('skills', models.ManyToManyField(blank=True, related_name='skills_supportfile', to='socle.Skill', verbose_name='Compétences ciblées')),
                ('theme', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='supportfiles', to='socle.Theme', verbose_name='Thème')),
            ],
        ),
        migrations.CreateModel(
            name='Studentanswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', models.PositiveIntegerField(default=0)),
                ('numexo', models.PositiveIntegerField(default=10)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('secondes', models.CharField(editable=False, max_length=255)),
                ('is_reading', models.BooleanField(default=0, editable=False)),
                ('exercise', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ggbfile_studentanswer', to='qcm.Exercise')),
                ('parcours', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='qcm.Parcours')),
                ('student', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='account.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Resultggbskill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', models.PositiveIntegerField(default=0)),
                ('relationship', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relationship_resultggbskills', to='qcm.Relationship')),
                ('skill', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='skill_resultggbskills', to='socle.Skill')),
                ('student', models.ForeignKey(default='', editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='student_resultggbskills', to='account.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Remediationcustom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=255, verbose_name='Titre')),
                ('video', models.CharField(blank=True, default='', max_length=255, verbose_name='url de la vidéo')),
                ('mediation', models.FileField(blank=True, default='', upload_to=qcm.models.file_folder_path, verbose_name='Fichier')),
                ('audio', models.BooleanField(default=0, verbose_name='Audio texte ?')),
                ('duration', models.PositiveIntegerField(blank=True, default=15, verbose_name='Durée estimée (en min.)')),
                ('consigne', models.BooleanField(default=0, verbose_name='Consigne ?')),
                ('courses', models.ManyToManyField(blank=True, related_name='courses_remediationcustom', to='qcm.Course', verbose_name='Cours')),
                ('customexercise', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, related_name='customexercise_remediation', to='qcm.Customexercise')),
            ],
        ),
        migrations.CreateModel(
            name='Remediation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=255, verbose_name='Titre')),
                ('video', models.CharField(blank=True, default='', max_length=255, verbose_name='url de la vidéo')),
                ('mediation', models.FileField(blank=True, default='', upload_to=qcm.models.file_directory_path, verbose_name='Fichier')),
                ('audio', models.BooleanField(default=0, verbose_name='Audio texte ?')),
                ('duration', models.PositiveIntegerField(blank=True, default=15, verbose_name='Durée estimée (en min.)')),
                ('consigne', models.BooleanField(default=0, verbose_name='Consigne ?')),
                ('courses', models.ManyToManyField(blank=True, related_name='courses_remediation', to='qcm.Course', verbose_name='Cours')),
                ('relationship', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, related_name='relationship_remediation', to='qcm.Relationship')),
            ],
        ),
        migrations.AddField(
            model_name='parcours',
            name='exercises',
            field=models.ManyToManyField(blank=True, related_name='exercises_parcours', through='qcm.Relationship', to='qcm.Exercise'),
        ),
        migrations.AddField(
            model_name='parcours',
            name='folder_parcours',
            field=models.ManyToManyField(blank=True, related_name='_parcours_folder_parcours_+', to='qcm.Parcours', verbose_name='Nom de parcours'),
        ),
        migrations.AddField(
            model_name='parcours',
            name='groups',
            field=models.ManyToManyField(blank=True, editable=False, related_name='group_parcours', to='group.Group'),
        ),
        migrations.AddField(
            model_name='parcours',
            name='leaf_parcours',
            field=models.ManyToManyField(blank=True, related_name='_parcours_leaf_parcours_+', to='qcm.Parcours', verbose_name='Nom du dossier'),
        ),
        migrations.AddField(
            model_name='parcours',
            name='level',
            field=models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='level_parcours', to='socle.Level'),
        ),
        migrations.AddField(
            model_name='parcours',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='students_to_parcours', to='account.Student', verbose_name='Elèves'),
        ),
        migrations.AddField(
            model_name='parcours',
            name='subject',
            field=models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subject_parcours', to='socle.Subject', verbose_name='Enseignement'),
        ),
        migrations.AddField(
            model_name='parcours',
            name='teacher',
            field=models.ForeignKey(blank=True, default='', editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_parcours', to='account.Teacher'),
        ),
        migrations.CreateModel(
            name='Masteringcustom_done',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('writing', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Texte*')),
                ('mastering', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='mastering_custom_done', to='qcm.Masteringcustom', verbose_name='Exercice')),
                ('student', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='students_mastering_custom_done', to='account.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Mastering_done',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('writing', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Texte*')),
                ('mastering', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='mastering_done', to='qcm.Mastering', verbose_name='Exercice')),
                ('student', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='students_mastering_done', to='account.Student')),
            ],
        ),
        migrations.AddField(
            model_name='mastering',
            name='relationship',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='relationship_mastering', to='qcm.Relationship', verbose_name='Exercice'),
        ),
        migrations.CreateModel(
            name='Generalcomment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('teacher', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_generalcomment', to='account.Teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Exerciselocker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default=account.models.generate_code, max_length=100, unique=True, verbose_name='Code')),
                ('custom', models.BooleanField(default=0, editable=False)),
                ('lock', models.DateTimeField(blank=True, editable=False, null=True)),
                ('customexercise', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='customexercise_exerciselocker', to='qcm.Customexercise')),
                ('relationship', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relationship_exerciselocker', to='qcm.Relationship')),
                ('student', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='student_exerciselocker', to='account.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='exercise',
            name='supportfile',
            field=models.ForeignKey(blank=True, default=1, on_delete=django.db.models.deletion.PROTECT, related_name='exercises', to='qcm.Supportfile', verbose_name='Fichier Géogebra'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exercises', to='socle.Theme', verbose_name='Thème'),
        ),
        migrations.CreateModel(
            name='DocumentReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.CharField(editable=False, max_length=100)),
                ('document_id', models.PositiveIntegerField(default=3, editable=False)),
                ('report', ckeditor_uploader.fields.RichTextUploadingField(blank=True, default='RAS', verbose_name='Remarque*')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_done', models.BooleanField(default=0, verbose_name='Fait')),
                ('user', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='user_document_report', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Demand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('demand', models.TextField(blank=True, verbose_name='Votre demande explicitée*')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('file', models.FileField(blank=True, default='', null=True, upload_to=qcm.models.directory_path, verbose_name='Exercice souhaité')),
                ('done', models.BooleanField(blank=True, default=0, null=True, verbose_name='Fait')),
                ('code', models.CharField(blank=True, default='', max_length=10, null=True, verbose_name="id de l'exercice créé")),
                ('knowledge', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='demand', to='socle.Knowledge', verbose_name='Savoir faire associé - Titre')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='demand', to='socle.Level', verbose_name='Niveau')),
                ('teacher', models.ForeignKey(default='', editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='demand', to='account.Teacher')),
                ('theme', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='demand', to='socle.Theme', verbose_name='Thème')),
            ],
        ),
        migrations.AddField(
            model_name='customexercise',
            name='parcourses',
            field=models.ManyToManyField(blank=True, related_name='parcours_customexercises', to='qcm.Parcours', verbose_name='Parcours attachés'),
        ),
        migrations.AddField(
            model_name='customexercise',
            name='skills',
            field=models.ManyToManyField(blank=True, related_name='skill_customexercises', to='socle.Skill', verbose_name='Compétences évaluées'),
        ),
        migrations.AddField(
            model_name='customexercise',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='students_customexercises', to='account.Student'),
        ),
        migrations.AddField(
            model_name='customexercise',
            name='teacher',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_customexercises', to='account.Teacher'),
        ),
        migrations.CreateModel(
            name='Customanswerimage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, default='', null=True, upload_to=qcm.models.file_directory_to_student, verbose_name='Scan ou image ou Photo')),
                ('imagecanvas', models.TextField(blank=True, editable=False, null=True)),
                ('customanswerbystudent', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='customexercise_custom_answer_image', to='qcm.Customanswerbystudent')),
            ],
        ),
        migrations.AddField(
            model_name='customanswerbystudent',
            name='customexercise',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='customexercise_custom_answer', to='qcm.Customexercise'),
        ),
        migrations.AddField(
            model_name='customanswerbystudent',
            name='parcours',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='parcours_custom_answer', to='qcm.Parcours'),
        ),
        migrations.AddField(
            model_name='customanswerbystudent',
            name='student',
            field=models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='student_custom_answer', to='account.Student'),
        ),
        migrations.AddField(
            model_name='course',
            name='parcours',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course', to='qcm.Parcours'),
        ),
        migrations.AddField(
            model_name='course',
            name='relationships',
            field=models.ManyToManyField(blank=True, related_name='relationships_courses', to='qcm.Relationship', verbose_name='Lier ce cours à'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='students_course', to='account.Student', verbose_name='Attribuer à/au'),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='course', to='account.Teacher'),
        ),
        migrations.CreateModel(
            name='Constraint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default='', editable=False, max_length=8)),
                ('scoremin', models.PositiveIntegerField(default=80, editable=False)),
                ('relationship', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, related_name='relationship_constraint', to='qcm.Relationship')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('teacher', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_comment', to='account.Teacher')),
            ],
        ),
        migrations.CreateModel(
            name='Resultexercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', models.PositiveIntegerField(default=0)),
                ('exercise', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='results_e', to='qcm.Exercise')),
                ('student', models.ForeignKey(default='', editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='results_e', to='account.Student')),
            ],
            options={
                'unique_together': {('student', 'exercise')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='exercise',
            unique_together={('knowledge', 'supportfile')},
        ),
        migrations.AlterUniqueTogether(
            name='customanswerbystudent',
            unique_together={('student', 'parcours', 'customexercise')},
        ),
        migrations.CreateModel(
            name='Customannotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classe', models.CharField(editable=False, max_length=255)),
                ('style', models.CharField(editable=False, max_length=255)),
                ('attr_id', models.CharField(editable=False, max_length=255)),
                ('content', models.TextField(editable=False)),
                ('customanswerbystudent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='qcm.Customanswerbystudent')),
            ],
            options={
                'unique_together': {('customanswerbystudent', 'attr_id')},
            },
        ),
        migrations.CreateModel(
            name='Correctionskillcustomexercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('point', models.PositiveIntegerField(default=-1, editable=False)),
                ('customexercise', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='customexercise_correctionskill', to='qcm.Customexercise')),
                ('parcours', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='parcours_customskill_answer', to='qcm.Parcours')),
                ('skill', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='skill_correctionskill', to='socle.Skill')),
                ('student', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='student_correctionskill', to='account.Student')),
            ],
            options={
                'unique_together': {('student', 'customexercise', 'skill')},
            },
        ),
        migrations.CreateModel(
            name='Correctionknowledgecustomexercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('point', models.PositiveIntegerField(default=-1, editable=False)),
                ('customexercise', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='customexercise_correctionknowledge', to='qcm.Customexercise')),
                ('knowledge', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_correctionknowledge', to='socle.Knowledge')),
                ('parcours', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='parcours_customknowledge_answer', to='qcm.Parcours')),
                ('student', models.ForeignKey(blank=True, editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='student_correctionknowledge', to='account.Student')),
            ],
            options={
                'unique_together': {('student', 'customexercise', 'knowledge')},
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classe', models.CharField(editable=False, max_length=255)),
                ('style', models.CharField(editable=False, max_length=255)),
                ('attr_id', models.CharField(editable=False, max_length=255)),
                ('content', models.TextField(editable=False)),
                ('writtenanswerbystudent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='qcm.Writtenanswerbystudent')),
            ],
            options={
                'unique_together': {('writtenanswerbystudent', 'attr_id')},
            },
        ),
    ]
